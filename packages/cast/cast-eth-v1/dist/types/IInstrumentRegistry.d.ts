/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IInstrumentRegistryContract
  extends Truffle.Contract<IInstrumentRegistryInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IInstrumentRegistryInstance>;
}

type AllEvents = never;

export interface IInstrumentRegistryInstance extends Truffle.ContractInstance {
  listInstrument: {
    (
      name: string,
      isinCode: string,
      instrumentAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      name: string,
      isinCode: string,
      instrumentAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      name: string,
      isinCode: string,
      instrumentAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      name: string,
      isinCode: string,
      instrumentAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getInstrumentByName(
    name: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getInstrumentByIsinCode(
    isin: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  getAllInstruments(txDetails?: Truffle.TransactionDetails): Promise<string[]>;

  unListInstrument: {
    (isin: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(isin: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      isin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      isin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    listInstrument: {
      (
        name: string,
        isinCode: string,
        instrumentAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        name: string,
        isinCode: string,
        instrumentAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        name: string,
        isinCode: string,
        instrumentAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        name: string,
        isinCode: string,
        instrumentAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getInstrumentByName(
      name: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getInstrumentByIsinCode(
      isin: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    getAllInstruments(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;

    unListInstrument: {
      (isin: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(isin: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        isin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        isin: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
