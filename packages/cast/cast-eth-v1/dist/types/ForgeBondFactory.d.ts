/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ForgeBondFactoryContract
  extends Truffle.Contract<ForgeBondFactoryInstance> {
  "new"(
    owner: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ForgeBondFactoryInstance>;
}

export interface InstrumentCreated {
  name: "InstrumentCreated";
  args: {};
}

export interface InstrumentListed {
  name: "InstrumentListed";
  args: {
    _instrumentAddress: string;
    0: string;
  };
}

type AllEvents = InstrumentCreated | InstrumentListed;

export interface ForgeBondFactoryInstance extends Truffle.ContractInstance {
  createForgeBond: {
    (
      registryAddress: string,
      basicTokenInput: {
        initialSupply: number | BN | string;
        isinCode: string;
        name: string;
        symbol: string;
        denomination: number | BN | string;
        divisor: number | BN | string;
        startDate: number | BN | string;
        initialMaturityDate: number | BN | string;
        firstCouponDate: number | BN | string;
        couponFrequencyInMonths: number | BN | string;
        interestRateInBips: number | BN | string;
        callable: boolean;
        isSoftBullet: boolean;
        softBulletPeriodInMonths: number | BN | string;
        currency: string;
        registrar: string;
        settler: string;
        owner: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      registryAddress: string,
      basicTokenInput: {
        initialSupply: number | BN | string;
        isinCode: string;
        name: string;
        symbol: string;
        denomination: number | BN | string;
        divisor: number | BN | string;
        startDate: number | BN | string;
        initialMaturityDate: number | BN | string;
        firstCouponDate: number | BN | string;
        couponFrequencyInMonths: number | BN | string;
        interestRateInBips: number | BN | string;
        callable: boolean;
        isSoftBullet: boolean;
        softBulletPeriodInMonths: number | BN | string;
        currency: string;
        registrar: string;
        settler: string;
        owner: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      registryAddress: string,
      basicTokenInput: {
        initialSupply: number | BN | string;
        isinCode: string;
        name: string;
        symbol: string;
        denomination: number | BN | string;
        divisor: number | BN | string;
        startDate: number | BN | string;
        initialMaturityDate: number | BN | string;
        firstCouponDate: number | BN | string;
        couponFrequencyInMonths: number | BN | string;
        interestRateInBips: number | BN | string;
        callable: boolean;
        isSoftBullet: boolean;
        softBulletPeriodInMonths: number | BN | string;
        currency: string;
        registrar: string;
        settler: string;
        owner: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      registryAddress: string,
      basicTokenInput: {
        initialSupply: number | BN | string;
        isinCode: string;
        name: string;
        symbol: string;
        denomination: number | BN | string;
        divisor: number | BN | string;
        startDate: number | BN | string;
        initialMaturityDate: number | BN | string;
        firstCouponDate: number | BN | string;
        couponFrequencyInMonths: number | BN | string;
        interestRateInBips: number | BN | string;
        callable: boolean;
        isSoftBullet: boolean;
        softBulletPeriodInMonths: number | BN | string;
        currency: string;
        registrar: string;
        settler: string;
        owner: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    createForgeBond: {
      (
        registryAddress: string,
        basicTokenInput: {
          initialSupply: number | BN | string;
          isinCode: string;
          name: string;
          symbol: string;
          denomination: number | BN | string;
          divisor: number | BN | string;
          startDate: number | BN | string;
          initialMaturityDate: number | BN | string;
          firstCouponDate: number | BN | string;
          couponFrequencyInMonths: number | BN | string;
          interestRateInBips: number | BN | string;
          callable: boolean;
          isSoftBullet: boolean;
          softBulletPeriodInMonths: number | BN | string;
          currency: string;
          registrar: string;
          settler: string;
          owner: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        registryAddress: string,
        basicTokenInput: {
          initialSupply: number | BN | string;
          isinCode: string;
          name: string;
          symbol: string;
          denomination: number | BN | string;
          divisor: number | BN | string;
          startDate: number | BN | string;
          initialMaturityDate: number | BN | string;
          firstCouponDate: number | BN | string;
          couponFrequencyInMonths: number | BN | string;
          interestRateInBips: number | BN | string;
          callable: boolean;
          isSoftBullet: boolean;
          softBulletPeriodInMonths: number | BN | string;
          currency: string;
          registrar: string;
          settler: string;
          owner: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        registryAddress: string,
        basicTokenInput: {
          initialSupply: number | BN | string;
          isinCode: string;
          name: string;
          symbol: string;
          denomination: number | BN | string;
          divisor: number | BN | string;
          startDate: number | BN | string;
          initialMaturityDate: number | BN | string;
          firstCouponDate: number | BN | string;
          couponFrequencyInMonths: number | BN | string;
          interestRateInBips: number | BN | string;
          callable: boolean;
          isSoftBullet: boolean;
          softBulletPeriodInMonths: number | BN | string;
          currency: string;
          registrar: string;
          settler: string;
          owner: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        registryAddress: string,
        basicTokenInput: {
          initialSupply: number | BN | string;
          isinCode: string;
          name: string;
          symbol: string;
          denomination: number | BN | string;
          divisor: number | BN | string;
          startDate: number | BN | string;
          initialMaturityDate: number | BN | string;
          firstCouponDate: number | BN | string;
          couponFrequencyInMonths: number | BN | string;
          interestRateInBips: number | BN | string;
          callable: boolean;
          isSoftBullet: boolean;
          softBulletPeriodInMonths: number | BN | string;
          currency: string;
          registrar: string;
          settler: string;
          owner: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
