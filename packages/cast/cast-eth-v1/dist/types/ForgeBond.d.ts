/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ForgeBondContract extends Truffle.Contract<ForgeBondInstance> {
  "new"(
    basicTokenInput: {
      initialSupply: number | BN | string;
      isinCode: string;
      name: string;
      symbol: string;
      denomination: number | BN | string;
      divisor: number | BN | string;
      startDate: number | BN | string;
      initialMaturityDate: number | BN | string;
      firstCouponDate: number | BN | string;
      couponFrequencyInMonths: number | BN | string;
      interestRateInBips: number | BN | string;
      callable: boolean;
      isSoftBullet: boolean;
      softBulletPeriodInMonths: number | BN | string;
      currency: string;
      registrar: string;
      settler: string;
      owner: string;
    },
    meta?: Truffle.TransactionDetails
  ): Promise<ForgeBondInstance>;
}

export interface NewOperator {
  name: "NewOperator";
  args: {
    _by: string;
    _operator: string;
    0: string;
    1: string;
  };
}

export interface PaymentReceived {
  name: "PaymentReceived";
  args: {
    settlementTransactionId: BN;
    settlementTransactionOperationType: BN;
    0: BN;
    1: BN;
  };
}

export interface PaymentTransferred {
  name: "PaymentTransferred";
  args: {
    settlementTransactionId: BN;
    settlementTransactionOperationType: BN;
    0: BN;
    1: BN;
  };
}

export interface RedemptionInitiated {
  name: "RedemptionInitiated";
  args: {
    settlementTransactionIds: BN[];
    0: BN[];
  };
}

export interface SettlementTransactionCanceled {
  name: "SettlementTransactionCanceled";
  args: {
    settlementTransactionId: BN;
    0: BN;
  };
}

export interface SubscriptionInitiated {
  name: "SubscriptionInitiated";
  args: {
    settlementTransactionId: BN;
    0: BN;
  };
}

export interface TradeInitiated {
  name: "TradeInitiated";
  args: {
    settlementTransactionId: BN;
    0: BN;
  };
}

export interface Transfer {
  name: "Transfer";
  args: {
    _from: string;
    _to: string;
    _value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents =
  | NewOperator
  | PaymentReceived
  | PaymentTransferred
  | RedemptionInitiated
  | SettlementTransactionCanceled
  | SubscriptionInitiated
  | TradeInitiated
  | Transfer;

export interface ForgeBondInstance extends Truffle.ContractInstance {
  CANCELLED(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  CASH_TRANSFERRED(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  REGISTRAR_ROLE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  SETTLER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  settler(txDetails?: Truffle.TransactionDetails): Promise<string>;

  registrar(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  currentSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  name(txDetails?: Truffle.TransactionDetails): Promise<string>;

  symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isinCode(txDetails?: Truffle.TransactionDetails): Promise<string>;

  denomination(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  divisor(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  startDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  maturityDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  currentMaturityDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  firstCouponDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  couponFrequencyInMonths(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  interestRateInBips(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  callable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isSoftBullet(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  softBulletPeriodInMonths(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  currency(txDetails?: Truffle.TransactionDetails): Promise<string>;

  state(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getType(txDetails?: Truffle.TransactionDetails): Promise<string>;

  balanceOf(
    _owner: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  transfer(
    _to: string,
    _value: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  burn: {
    (
      quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getFullBalances(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ _address: string; _balance: BN; _locked: BN }[]>;

  getBalance(
    _address: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  authorizeOperator: {
    (
      _roleName: number | BN | string,
      _operatorAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _roleName: number | BN | string,
      _operatorAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _roleName: number | BN | string,
      _operatorAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _roleName: number | BN | string,
      _operatorAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOperatorWithRoleAuthorized(
    _operatorAddress: string,
    _roleName: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  revokeOperatorAuthorization: {
    (
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initiateSubscription: {
    (
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initiateTrade: {
    (
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmPaymentReceived: {
    (
      _settlementTransactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _settlementTransactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _settlementTransactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _settlementTransactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  confirmPaymentTransferred: {
    (
      _settlementTransactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _settlementTransactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _settlementTransactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _settlementTransactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getCurrentState(
    _settlementTransactionId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getOperationType(
    _operationId: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  initiateRedemption: {
    (
      partialSettlementTransactions: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partialSettlementTransactions: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partialSettlementTransactions: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partialSettlementTransactions: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelSettlementTransaction: {
    (
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      partialSettlementTransaction: {
        txId: number | BN | string;
        operationId: number | BN | string;
        deliverySenderAccountNumber: string;
        deliveryReceiverAccountNumber: string;
        deliveryQuantity: number | BN | string;
        txHash: string;
      },
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    CANCELLED(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    CASH_TRANSFERRED(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    REGISTRAR_ROLE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    SETTLER_ROLE(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    settler(txDetails?: Truffle.TransactionDetails): Promise<string>;

    registrar(txDetails?: Truffle.TransactionDetails): Promise<string>;

    initialSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    currentSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    name(txDetails?: Truffle.TransactionDetails): Promise<string>;

    symbol(txDetails?: Truffle.TransactionDetails): Promise<string>;

    isinCode(txDetails?: Truffle.TransactionDetails): Promise<string>;

    denomination(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    divisor(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    startDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    maturityDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    currentMaturityDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    firstCouponDate(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    couponFrequencyInMonths(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    interestRateInBips(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    callable(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    isSoftBullet(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    softBulletPeriodInMonths(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    currency(txDetails?: Truffle.TransactionDetails): Promise<string>;

    state(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getType(txDetails?: Truffle.TransactionDetails): Promise<string>;

    balanceOf(
      _owner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    transfer(
      _to: string,
      _value: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    decimals(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    burn: {
      (
        quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        quantity: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getFullBalances(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ _address: string; _balance: BN; _locked: BN }[]>;

    getBalance(
      _address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    authorizeOperator: {
      (
        _roleName: number | BN | string,
        _operatorAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _roleName: number | BN | string,
        _operatorAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _roleName: number | BN | string,
        _operatorAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _roleName: number | BN | string,
        _operatorAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isOperatorWithRoleAuthorized(
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    revokeOperatorAuthorization: {
      (
        _operatorAddress: string,
        _roleName: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _operatorAddress: string,
        _roleName: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _operatorAddress: string,
        _roleName: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _operatorAddress: string,
        _roleName: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initiateSubscription: {
      (
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initiateTrade: {
      (
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    confirmPaymentReceived: {
      (
        _settlementTransactionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _settlementTransactionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _settlementTransactionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _settlementTransactionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    confirmPaymentTransferred: {
      (
        _settlementTransactionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _settlementTransactionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _settlementTransactionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _settlementTransactionId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getCurrentState(
      _settlementTransactionId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getOperationType(
      _operationId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    initiateRedemption: {
      (
        partialSettlementTransactions: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partialSettlementTransactions: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partialSettlementTransactions: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partialSettlementTransactions: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        }[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelSettlementTransaction: {
      (
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        partialSettlementTransaction: {
          txId: number | BN | string;
          operationId: number | BN | string;
          deliverySenderAccountNumber: string;
          deliveryReceiverAccountNumber: string;
          deliveryQuantity: number | BN | string;
          txHash: string;
        },
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
