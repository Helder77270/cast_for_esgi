/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IOperatorManagerContract
  extends Truffle.Contract<IOperatorManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IOperatorManagerInstance>;
}

export interface NewOperator {
  name: "NewOperator";
  args: {
    _by: string;
    _operator: string;
    0: string;
    1: string;
  };
}

type AllEvents = NewOperator;

export interface IOperatorManagerInstance extends Truffle.ContractInstance {
  authorizeOperator: {
    (
      _roleName: number | BN | string,
      _operatorAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _roleName: number | BN | string,
      _operatorAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _roleName: number | BN | string,
      _operatorAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _roleName: number | BN | string,
      _operatorAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOperatorWithRoleAuthorized(
    _operatorAddress: string,
    _roleName: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  revokeOperatorAuthorization: {
    (
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    authorizeOperator: {
      (
        _roleName: number | BN | string,
        _operatorAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _roleName: number | BN | string,
        _operatorAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _roleName: number | BN | string,
        _operatorAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _roleName: number | BN | string,
        _operatorAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isOperatorWithRoleAuthorized(
      _operatorAddress: string,
      _roleName: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    revokeOperatorAuthorization: {
      (
        _operatorAddress: string,
        _roleName: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _operatorAddress: string,
        _roleName: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _operatorAddress: string,
        _roleName: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _operatorAddress: string,
        _roleName: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
