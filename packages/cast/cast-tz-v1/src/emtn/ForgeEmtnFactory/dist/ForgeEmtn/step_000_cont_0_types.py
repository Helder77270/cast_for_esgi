import smartpy as sp

tstorage = sp.TRecord(balances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), currency = sp.TString, currentSupply = sp.TNat, entrypointsBigMap = sp.TBigMap(sp.TBytes, sp.TBytes), eventSinkContractAddress = sp.TAddress, initialSupply = sp.TNat, isinCode = sp.TString, name = sp.TString, operatorsAuthorizations = sp.TMap(sp.TAddress, sp.TSet(sp.TNat)), owner = sp.TAddress, settlementTransactionRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById")), symbol = sp.TString).layout(((("balances", ("currency", "currentSupply")), ("entrypointsBigMap", ("eventSinkContractAddress", "initialSupply"))), (("isinCode", ("name", "operatorsAuthorizations")), ("owner", ("settlementTransactionRepository", "symbol")))))
tparameter = sp.TVariant(confirmPaymentReceived = sp.TRecord(txId = sp.TNat).layout("txId"), confirmPaymentTransferred = sp.TRecord(txId = sp.TNat).layout("txId"), initiateSubscription = sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout(("txId", ("operationId", ("deliverySenderAccountNumber", ("deliveryReceiverAccountNumber", ("deliveryQuantity", "txHash")))))), run = sp.TRecord(_operator = sp.TAddress, _operatorRole = sp.TNat, entrypointName = sp.TString).layout(("_operator", ("_operatorRole", "entrypointName"))), upgrade = sp.TMap(sp.TBytes, sp.TBytes)).layout((("confirmPaymentReceived", "confirmPaymentTransferred"), ("initiateSubscription", ("run", "upgrade"))))
tglobals = { }
tviews = { }
