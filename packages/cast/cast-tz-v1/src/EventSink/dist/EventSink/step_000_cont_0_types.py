import smartpy as sp

tstorage = sp.TUnit
tparameter = sp.TVariant(InstrumentListed = sp.TRecord(address = sp.TAddress, isin = sp.TString, name = sp.TString).layout(("address", ("isin", "name"))), InstrumentUnlisted = sp.TRecord(address = sp.TAddress, isin = sp.TString, name = sp.TString).layout(("address", ("isin", "name"))), PaymentReceived = sp.TRecord(settlementId = sp.TNat, settlementTransactionOperationType = sp.TNat).layout(("settlementId", "settlementTransactionOperationType")), PaymentTransferred = sp.TRecord(settlementId = sp.TNat, settlementTransactionOperationType = sp.TNat).layout(("settlementId", "settlementTransactionOperationType")), SubscriptionInitiated = sp.TRecord(settlementId = sp.TNat).layout("settlementId"), Transfer = sp.TRecord(_from = sp.TAddress, _to = sp.TAddress, _value = sp.TNat).layout(("_from", ("_to", "_value"))), forgeBondCreated = sp.TRecord(owner = sp.TAddress, registrar = sp.TAddress, settler = sp.TAddress, tokenAddress = sp.TAddress, tokenMetadata = sp.TRecord(initialSupply = sp.TNat, isinCode = sp.TString, name = sp.TString, symbol = sp.TString).layout((("initialSupply", "isinCode"), ("name", "symbol")))).layout((("owner", "registrar"), ("settler", ("tokenAddress", "tokenMetadata")))), forgeStructuredProductCreated = sp.TRecord(owner = sp.TAddress, registrar = sp.TAddress, settler = sp.TAddress, tokenAddress = sp.TAddress, tokenMetadata = sp.TRecord(initialSupply = sp.TNat, isinCode = sp.TString, name = sp.TString, symbol = sp.TString).layout((("initialSupply", "isinCode"), ("name", "symbol")))).layout((("owner", "registrar"), ("settler", ("tokenAddress", "tokenMetadata")))), newOperator = sp.TRecord(by = sp.TAddress, operator = sp.TAddress, operatorRole = sp.TNat).layout(("by", ("operator", "operatorRole"))), revokeOperator = sp.TRecord(by = sp.TAddress, operator = sp.TAddress, operatorRole = sp.TNat).layout(("by", ("operator", "operatorRole")))).layout(((("InstrumentListed", "InstrumentUnlisted"), ("PaymentReceived", ("PaymentTransferred", "SubscriptionInitiated"))), (("Transfer", "forgeBondCreated"), ("forgeStructuredProductCreated", ("newOperator", "revokeOperator")))))
tglobals = { }
tviews = { }
