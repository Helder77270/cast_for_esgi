import smartpy as sp

class Contract(sp.Contract):
  def __init__(self):
    self.init_type(sp.TRecord(balances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), currency = sp.TString, currentSupply = sp.TNat, entrypointsBigMap = sp.TBigMap(sp.TBytes, sp.TBytes), eventSinkContractAddress = sp.TAddress, initialSupply = sp.TNat, isinCode = sp.TString, name = sp.TString, operatorsAuthorizations = sp.TMap(sp.TAddress, sp.TSet(sp.TNat)), owner = sp.TAddress, settlementTransactionRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById")), symbol = sp.TString).layout(((("balances", ("currency", "currentSupply")), ("entrypointsBigMap", ("eventSinkContractAddress", "initialSupply"))), (("isinCode", ("name", "operatorsAuthorizations")), ("owner", ("settlementTransactionRepository", "symbol"))))))

  @sp.entry_point
  def confirmPaymentReceived(self, params):
    sp.verify(self.data.settlementTransactionRepository.settlementTransactionById[params.txId].status == 2, 'subscription ticket not locked')
    self.data.settlementTransactionRepository = sp.unpack(self.data.entrypointsBigMap[sp.pack('callConfirmPaymentReceived')], sp.TLambda(sp.TRecord(balances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), operatorsAuthorizations = sp.TMap(sp.TAddress, sp.TSet(sp.TNat)), owner = sp.TAddress, sender = sp.TAddress, settlementTransactionRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById")), txId = sp.TNat).layout((("balances", ("operatorsAuthorizations", "owner")), ("sender", ("settlementTransactionRepository", "txId")))), sp.TRecord(newBalances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), newSettlementTransactionRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById"))).layout(("newBalances", "newSettlementTransactionRepository")))).open_some()(sp.record(balances = self.data.balances, operatorsAuthorizations = self.data.operatorsAuthorizations, owner = self.data.owner, sender = sp.sender, settlementTransactionRepository = self.data.settlementTransactionRepository, txId = params.txId)).newSettlementTransactionRepository
    self.data.balances = sp.unpack(self.data.entrypointsBigMap[sp.pack('callConfirmPaymentReceived')], sp.TLambda(sp.TRecord(balances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), operatorsAuthorizations = sp.TMap(sp.TAddress, sp.TSet(sp.TNat)), owner = sp.TAddress, sender = sp.TAddress, settlementTransactionRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById")), txId = sp.TNat).layout((("balances", ("operatorsAuthorizations", "owner")), ("sender", ("settlementTransactionRepository", "txId")))), sp.TRecord(newBalances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), newSettlementTransactionRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById"))).layout(("newBalances", "newSettlementTransactionRepository")))).open_some()(sp.record(balances = self.data.balances, operatorsAuthorizations = self.data.operatorsAuthorizations, owner = self.data.owner, sender = sp.sender, settlementTransactionRepository = self.data.settlementTransactionRepository, txId = params.txId)).newBalances
    sp.set_type(sp.record(_from = self.data.settlementTransactionRepository.settlementTransactionById[params.txId].deliverySenderAccountNumber, _to = self.data.settlementTransactionRepository.settlementTransactionById[params.txId].deliveryReceiverAccountNumber, _value = self.data.settlementTransactionRepository.settlementTransactionById[params.txId].deliveryQuantity), sp.TRecord(_from = sp.TAddress, _to = sp.TAddress, _value = sp.TNat).layout(("_from", ("_to", "_value"))))
    sp.verify(sp.contract(sp.TRecord(_from = sp.TAddress, _to = sp.TAddress, _value = sp.TNat).layout(("_from", ("_to", "_value"))), self.data.eventSinkContractAddress, entry_point='Transfer').is_some(), 'Bad event sink contract address')
    sp.transfer(sp.record(_from = self.data.settlementTransactionRepository.settlementTransactionById[params.txId].deliverySenderAccountNumber, _to = self.data.settlementTransactionRepository.settlementTransactionById[params.txId].deliveryReceiverAccountNumber, _value = self.data.settlementTransactionRepository.settlementTransactionById[params.txId].deliveryQuantity), sp.tez(0), sp.contract(sp.TRecord(_from = sp.TAddress, _to = sp.TAddress, _value = sp.TNat).layout(("_from", ("_to", "_value"))), self.data.eventSinkContractAddress, entry_point='Transfer').open_some())
    sp.verify(sp.contract(sp.TRecord(settlementId = sp.TNat, settlementTransactionOperationType = sp.TNat).layout(("settlementId", "settlementTransactionOperationType")), self.data.eventSinkContractAddress, entry_point='PaymentReceived').is_some(), 'Bad event sink contract address')
    sp.transfer(sp.record(settlementId = params.txId, settlementTransactionOperationType = 1), sp.tez(0), sp.contract(sp.TRecord(settlementId = sp.TNat, settlementTransactionOperationType = sp.TNat).layout(("settlementId", "settlementTransactionOperationType")), self.data.eventSinkContractAddress, entry_point='PaymentReceived').open_some())

  @sp.entry_point
  def confirmPaymentTransferred(self, params):
    self.data.settlementTransactionRepository = sp.unpack(self.data.entrypointsBigMap[sp.pack('callConfirmPaymentTransferred')], sp.TLambda(sp.TRecord(operatorsAuthorizations = sp.TMap(sp.TAddress, sp.TSet(sp.TNat)), owner = sp.TAddress, sender = sp.TAddress, settlementTransactionRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById")), txId = sp.TNat).layout((("operatorsAuthorizations", "owner"), ("sender", ("settlementTransactionRepository", "txId")))), sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById")))).open_some()(sp.record(operatorsAuthorizations = self.data.operatorsAuthorizations, owner = self.data.owner, sender = sp.sender, settlementTransactionRepository = self.data.settlementTransactionRepository, txId = params.txId))
    sp.verify(sp.contract(sp.TRecord(settlementId = sp.TNat, settlementTransactionOperationType = sp.TNat).layout(("settlementId", "settlementTransactionOperationType")), self.data.eventSinkContractAddress, entry_point='PaymentTransferred').is_some(), 'Bad event sink contract address')
    sp.transfer(sp.record(settlementId = params.txId, settlementTransactionOperationType = 1), sp.tez(0), sp.contract(sp.TRecord(settlementId = sp.TNat, settlementTransactionOperationType = sp.TNat).layout(("settlementId", "settlementTransactionOperationType")), self.data.eventSinkContractAddress, entry_point='PaymentTransferred').open_some())

  @sp.entry_point
  def initiateSubscription(self, params):
    sp.set_type(params, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout(("txId", ("operationId", ("deliverySenderAccountNumber", ("deliveryReceiverAccountNumber", ("deliveryQuantity", "txHash")))))))
    sp.verify(~ (self.data.settlementTransactionRepository.settlementTransactionById.contains(params.txId)), 'settlementTransactionId already used')
    sp.verify(sp.pack(sp.set_type_expr(self.data.owner, sp.TAddress)) == sp.pack(sp.set_type_expr(params.deliverySenderAccountNumber, sp.TAddress)), 'deliverySenderAccountNumber must match token owner')
    self.data.settlementTransactionRepository = sp.unpack(self.data.entrypointsBigMap[sp.pack('callInitiateSubscription')], sp.TLambda(sp.TRecord(balances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), newSettlementTransaction = sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), ("operationId", ("txHash", "txId")))), operatorsAuthorizations = sp.TMap(sp.TAddress, sp.TSet(sp.TNat)), sender = sp.TAddress, settlementTransactionRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById"))).layout((("balances", "newSettlementTransaction"), ("operatorsAuthorizations", ("sender", "settlementTransactionRepository")))), sp.TRecord(newBalances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), newSettlementRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById"))).layout(("newBalances", "newSettlementRepository")))).open_some()(sp.record(balances = self.data.balances, newSettlementTransaction = sp.record(deliveryQuantity = params.deliveryQuantity, deliveryReceiverAccountNumber = params.deliveryReceiverAccountNumber, deliverySenderAccountNumber = params.deliverySenderAccountNumber, operationId = params.operationId, txHash = params.txHash, txId = params.txId), operatorsAuthorizations = self.data.operatorsAuthorizations, sender = sp.sender, settlementTransactionRepository = self.data.settlementTransactionRepository)).newSettlementRepository
    self.data.balances = sp.unpack(self.data.entrypointsBigMap[sp.pack('callInitiateSubscription')], sp.TLambda(sp.TRecord(balances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), newSettlementTransaction = sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), ("operationId", ("txHash", "txId")))), operatorsAuthorizations = sp.TMap(sp.TAddress, sp.TSet(sp.TNat)), sender = sp.TAddress, settlementTransactionRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById"))).layout((("balances", "newSettlementTransaction"), ("operatorsAuthorizations", ("sender", "settlementTransactionRepository")))), sp.TRecord(newBalances = sp.TMap(sp.TAddress, sp.TRecord(balance = sp.TNat, locked = sp.TNat).layout(("balance", "locked"))), newSettlementRepository = sp.TRecord(operationTypeByOperationId = sp.TMap(sp.TNat, sp.TNat), settlementTransactionById = sp.TMap(sp.TNat, sp.TRecord(deliveryQuantity = sp.TNat, deliveryReceiverAccountNumber = sp.TAddress, deliverySenderAccountNumber = sp.TAddress, operationId = sp.TNat, status = sp.TNat, txHash = sp.TString, txId = sp.TNat).layout((("deliveryQuantity", ("deliveryReceiverAccountNumber", "deliverySenderAccountNumber")), (("operationId", "status"), ("txHash", "txId")))))).layout(("operationTypeByOperationId", "settlementTransactionById"))).layout(("newBalances", "newSettlementRepository")))).open_some()(sp.record(balances = self.data.balances, newSettlementTransaction = sp.record(deliveryQuantity = params.deliveryQuantity, deliveryReceiverAccountNumber = params.deliveryReceiverAccountNumber, deliverySenderAccountNumber = params.deliverySenderAccountNumber, operationId = params.operationId, txHash = params.txHash, txId = params.txId), operatorsAuthorizations = self.data.operatorsAuthorizations, sender = sp.sender, settlementTransactionRepository = self.data.settlementTransactionRepository)).newBalances
    sp.verify(sp.contract(sp.TRecord(settlementId = sp.TNat).layout("settlementId"), self.data.eventSinkContractAddress, entry_point='SubscriptionInitiated').is_some(), 'Bad event sink contract address')
    sp.transfer(sp.record(settlementId = params.txId), sp.tez(0), sp.contract(sp.TRecord(settlementId = sp.TNat).layout("settlementId"), self.data.eventSinkContractAddress, entry_point='SubscriptionInitiated').open_some())

  @sp.entry_point
  def run(self, params):
    sp.set_type(params, sp.TRecord(_operator = sp.TAddress, _operatorRole = sp.TNat, entrypointName = sp.TString).layout(("_operator", ("_operatorRole", "entrypointName"))))
    self.data.operatorsAuthorizations = sp.unpack(self.data.entrypointsBigMap[sp.pack(params.entrypointName)], sp.TLambda(sp.TRecord(_operator = sp.TAddress, _operatorRole = sp.TNat, _operatorsAuthorizations = sp.TMap(sp.TAddress, sp.TSet(sp.TNat)), _owner = sp.TAddress, _sender = sp.TAddress).layout((("_operator", "_operatorRole"), ("_operatorsAuthorizations", ("_owner", "_sender")))), sp.TMap(sp.TAddress, sp.TSet(sp.TNat)))).open_some()(sp.record(_operator = params._operator, _operatorRole = params._operatorRole, _operatorsAuthorizations = self.data.operatorsAuthorizations, _owner = self.data.owner, _sender = sp.sender))
    sp.if params.entrypointName == 'callAuthorizeOperator':
      sp.verify(sp.contract(sp.TRecord(by = sp.TAddress, operator = sp.TAddress, operatorRole = sp.TNat).layout(("by", ("operator", "operatorRole"))), self.data.eventSinkContractAddress, entry_point='newOperator').is_some(), 'Bad event sink contract address')
      sp.transfer(sp.record(by = sp.sender, operator = params._operator, operatorRole = params._operatorRole), sp.tez(0), sp.contract(sp.TRecord(by = sp.TAddress, operator = sp.TAddress, operatorRole = sp.TNat).layout(("by", ("operator", "operatorRole"))), self.data.eventSinkContractAddress, entry_point='newOperator').open_some())
    sp.if params.entrypointName == 'callRevokeOperatorAuthorization':
      sp.verify(sp.contract(sp.TRecord(by = sp.TAddress, operator = sp.TAddress, operatorRole = sp.TNat).layout(("by", ("operator", "operatorRole"))), self.data.eventSinkContractAddress, entry_point='revokeOperator').is_some(), 'Bad event sink contract address')
      sp.transfer(sp.record(by = sp.sender, operator = params._operator, operatorRole = params._operatorRole), sp.tez(0), sp.contract(sp.TRecord(by = sp.TAddress, operator = sp.TAddress, operatorRole = sp.TNat).layout(("by", ("operator", "operatorRole"))), self.data.eventSinkContractAddress, entry_point='revokeOperator').open_some())

  @sp.entry_point
  def upgrade(self, params):
    sp.verify((sp.sender == self.data.owner) | (sp.source == self.data.owner), 'only owner can upgrade')
    sp.for x in params.items():
      self.data.entrypointsBigMap[x.key] = x.value

sp.add_compilation_target("test", Contract())